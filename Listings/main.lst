


ARM Macro Assembler    Page 1 


    1 00000000         ; MESTRE Pierre & LEBAS Pierre E3FI - ESIEE Paris -
    2 00000000         ; 11/2019 - Evalbot (Cortex M3 de Texas Instrument)
    3 00000000         ; programme - Réaliser un créneau tout en ASM
    4 00000000         
    5 00000000         
    6 00000000                 AREA             |.text|, CODE, READONLY
    7 00000000                 ENTRY
    8 00000000                 EXPORT           __main
    9 00000000         
   10 00000000         ;; The IMPORT command specifies that a symbol is defined
                        in a shared object at runtime.
   11 00000000                 IMPORT           MOTEUR_INIT ; initialise les mo
                                                            teurs (configure le
                                                            s pwms + GPIO)
   12 00000000         
   13 00000000                 IMPORT           MOTEUR_DROIT_ON ; activer le mo
                                                            teur droit
   14 00000000                 IMPORT           MOTEUR_DROIT_OFF ; déactiver le
                                                             moteur droit
   15 00000000                 IMPORT           MOTEUR_DROIT_AVANT ; moteur dro
                                                            it tourne vers l'av
                                                            ant
   16 00000000                 IMPORT           MOTEUR_DROIT_ARRIERE ; moteur d
                                                            roit tourne vers l'
                                                            arrière
   17 00000000                 IMPORT           MOTEUR_DROIT_INVERSE ; inverse 
                                                            le sens de rotation
                                                             du moteur droit
   18 00000000         
   19 00000000                 IMPORT           MOTEUR_GAUCHE_ON ; activer le m
                                                            oteur gauche
   20 00000000                 IMPORT           MOTEUR_GAUCHE_OFF ; déactiver l
                                                            e moteur gauche
   21 00000000                 IMPORT           MOTEUR_GAUCHE_AVANT ; moteur ga
                                                            uche tourne vers l'
                                                            avant
   22 00000000                 IMPORT           MOTEUR_GAUCHE_ARRIERE ; moteur 
                                                            gauche tourne vers 
                                                            l'arrière
   23 00000000                 IMPORT           MOTEUR_GAUCHE_INVERSE ; inverse
                                                             le sens de rotatio
                                                            n du moteur gauche
   24 00000000 400FE108 
                       SYSCTL_PERIPH_GPIOF
                               EQU              0x400FE108
   25 00000000         
   26 00000000         ; The GPIODATA register is the data register
   27 00000000         ; GPIO Port F (APB) base: 0x4002.5000 (p416 datasheet de
                        ;lm3s9B92.pdf
   28 00000000         
   29 00000000 40025000 
                       GPIO_PORTF_BASE
                               EQU              0x40025000
   30 00000000 40024000 
                       GPIO_PORTE_BASE
                               EQU              0x40024000
   31 00000000 40007000 
                       GPIO_PORTD_BASE
                               EQU              0x40007000



ARM Macro Assembler    Page 2 


   32 00000000         
   33 00000000         ; configure the corresponding pin to be an output
   34 00000000         ; all GPIO pins are inputs by default
   35 00000000         ; GPIO Direction (p417 datasheet de lm3s9B92.pdf
   36 00000000         
   37 00000000 00000400 
                       GPIO_O_DIR
                               EQU              0x400
   38 00000000         
   39 00000000         ; The GPIODR2R register is the 2-mA drive control regist
                       er
   40 00000000         ; By default, all GPIO pins have 2-mA drive.
   41 00000000         ; GPIO 2-mA Drive Select (p428 datasheet de lm3s9B92.pdf
                       )
   42 00000000         
   43 00000000 00000500 
                       GPIO_O_DR2R
                               EQU              0x500
   44 00000000         
   45 00000000         ; Digital enable register
   46 00000000         ; To use the pin as a digital input or output, the ;corr
                       esponding GPIODEN bit must be set.
   47 00000000         ; GPIO Digital Enable (p437 datasheet de lm3s9B92.pdf)
   48 00000000         
   49 00000000 0000051C 
                       GPIO_O_DEN
                               EQU              0x51C
   50 00000000         
   51 00000000         ; Registre pour activer les switchs  en logiciel (par dé
                       faut ;ils sont reliés à la masse donc inactifs)
   52 00000000         
   53 00000000 00000510 
                       GPIO_PUR
                               EQU              0x510
   54 00000000         
   55 00000000         ; Port select - LED1 et LED2 sur la ligne 4 et 5 du port
                        F
   56 00000000         
   57 00000000 00000030 
                       PORT45  EQU              0x30
   58 00000000         
   59 00000000         ; Port select - LED 2 sur la ligne 5 du port F
   60 00000000         
   61 00000000 00000020 
                       PORT5   EQU              0x20
   62 00000000         
   63 00000000         ; Port select - LED 1 sur la ligne 4 du port F
   64 00000000         
   65 00000000 00000010 
                       PORT4   EQU              0x10
   66 00000000         
   67 00000000         ; PORT E : selection des BUMPER GAUCHE et DROIT,LIGNE 01
                        du Port E
   68 00000000         
   69 00000000 00000003 
                       PORT01  EQU              0x03
   70 00000000         
   71 00000000         ; PORT E : selection du BUMPER DROIT, LIGNE 0 du Port E
   72 00000000         



ARM Macro Assembler    Page 3 


   73 00000000 00000001 
                       PORT0   EQU              0x01
   74 00000000         
   75 00000000         ; PORT E : selection du BUMPER DROIT, LIGNE 1 du Port E
   76 00000000         
   77 00000000 00000002 
                       PORT1   EQU              0x02
   78 00000000         ; PORT D : selection du SW1,LIGNE 6 du Port D
   79 00000000 00000040 
                       PORT6   EQU              0x40
   80 00000000         ; Instruction : aucune LED allumée
   81 00000000 00000080 
                       PORT7   EQU              0x80
   82 00000000         ; Instruction : aucune LED allumée
   83 00000000 00000000 
                       NOL2D   EQU              0x00
   84 00000000         
   85 00000000         ; Instruction : LED 1 allumée, ligne 4, du port F
   86 00000000         
   87 00000000 00000010 
                       LED1    EQU              0x10
   88 00000000         
   89 00000000         ; blinking frequency, non utile dans ce programme
   90 00000000         
   91 00000000 002FFFFF 
                       DUREE   EQU              0x002FFFFF
   92 00000000 00000000 
                       BOOL    EQU              0x0
   93 00000000         
   94 00000000                 EXPORT           __main
   95 00000000         
   96 00000000         __main
   97 00000000         
   98 00000000 F04F 0038       mov              r0, #0x00000038
   99 00000004 4E77            ldr              r6, = SYSCTL_PERIPH_GPIOF
  100 00000006         
  101 00000006 6030            str              r0, [r6]
  102 00000008         
  103 00000008         ;"There must be a delay of 3 system clocks before any GP
                       IO reg. access  (p413 datasheet de lm3s9B92.pdf)
  104 00000008         ;tres tres important....;; pas necessaire en simu ou en 
                       debbug ;step by step...
  105 00000008         
  106 00000008 BF00            nop
  107 0000000A BF00            nop
  108 0000000C BF00            nop
  109 0000000E         
  110 0000000E         ; CONFIGURATION LED
  111 0000000E         
  112 0000000E 4E76            ldr              r6, = GPIO_PORTF_BASE+GPIO_O_DI
R
  113 00000010         
  114 00000010         ; une broche (Pin) du portF en sortie (broche 4 et 5 : 0
                       0110000)
  115 00000010         
  116 00000010 F04F 0030       ldr              r0, = PORT45
  117 00000014 6030            str              r0, [r6]
  118 00000016         ;ldr r0, = PORT5
  119 00000016         ;str r0, [r8]  ; r8 contient sortie du PORT5



ARM Macro Assembler    Page 4 


  120 00000016         
  121 00000016         ; Enable Digital Function  
  122 00000016         
  123 00000016 4E75            ldr              r6, = GPIO_PORTF_BASE+GPIO_O_DE
N
  124 00000018 F04F 0030       ldr              r0, = PORT45
  125 0000001C 6030            str              r0, [r6]
  126 0000001E         
  127 0000001E         ; Choix de l'intensité de sortie (2mA) 
  128 0000001E         
  129 0000001E 4E74            ldr              r6, = GPIO_PORTF_BASE+GPIO_O_DR
2R
  130 00000020 F04F 0030       ldr              r0, = PORT45
  131 00000024 6030            str              r0, [r6]
  132 00000026         
  133 00000026         ; pour eteindre LED
  134 00000026         ; Configuration du Port D - Enable Digital Function - Po
                       rt D   
  135 00000026 F8DF B1CC       ldr              r11, = GPIO_PORTD_BASE+GPIO_O_D
EN
  136 0000002A F04F 0040       ldr              r0, = PORT6
  137 0000002E F8CB 0000       str              r0, [r11]
  138 00000032         ; Configuration du Port D - Enable Digital Function - Po
                       rt D   
  139 00000032         ;ldr r11, = GPIO_PORTD_BASE+GPIO_O_DEN 
  140 00000032         ; ldr r0, = PORT7  
  141 00000032         ; str r0, [r11] 
  142 00000032         ; Activer le registre des switchs, Port D   
  143 00000032 F8DF B1C4       ldr              r11, = GPIO_PORTD_BASE+GPIO_PUR
  144 00000036 F04F 0040       ldr              r0, = PORT6
  145 0000003A F8CB 0000       str              r0, [r11]
  146 0000003E         ;mov r2, #0x000           
  147 0000003E         ; Activer le registre des switchs, Port D   
  148 0000003E         ;ldr r11, = GPIO_PORTD_BASE+GPIO_PUR 
  149 0000003E         ; ldr r0, = PORT7
  150 0000003E         ; str r0, [r11]
  151 0000003E         ;mov r2, #0x000  
  152 0000003E         ; Enable Digital Function - Port E
  153 0000003E         
  154 0000003E 4F6F            ldr              r7, = GPIO_PORTE_BASE+GPIO_O_DE
N
  155 00000040 F04F 0003       ldr              r0, = PORT01
  156 00000044 6038            str              r0, [r7]
  157 00000046         
  158 00000046         ; Activer le registre des bumpers, Port E
  159 00000046         
  160 00000046 4F6E            ldr              r7, = GPIO_PORTE_BASE+GPIO_PUR
  161 00000048 F04F 0003       ldr              r0, = PORT01
  162 0000004C 6038            str              r0, [r7]
  163 0000004E         
  164 0000004E         ;; BL Branchement vers un lien (sous programme)
  165 0000004E         
  166 0000004E         ; Configure les PWM + GPIO
  167 0000004E F7FF FFFE       BL               MOTEUR_INIT
  168 00000052         
  169 00000052         ; Activer les deux moteurs droit et gauche
  170 00000052 F7FF FFFE       BL               MOTEUR_DROIT_OFF
  171 00000056 F7FF FFFE       BL               MOTEUR_GAUCHE_OFF
  172 0000005A         



ARM Macro Assembler    Page 5 


  173 0000005A         
  174 0000005A F04F 0C00       mov              r12, #0
  175 0000005E         ; Boucle de pilotage des 2 Moteurs (Evalbot tourne sur l
                       ui même)
  176 0000005E         loop
  177 0000005E         
  178 0000005E         
  179 0000005E         ; Evalbot avance droit devant
  180 0000005E         ; Avancement pendant une période (deux WAIT)
  181 0000005E F04F 0330       mov              r3, #PORT45
  182 00000062 4E68            ldr              r6, = GPIO_PORTF_BASE + (PORT45
<<2)
  183 00000064         
  184 00000064         ;lecture de l'état du BUMPER DROIT
  185 00000064         
  186 00000064 4F68            ldr              r7,= GPIO_PORTE_BASE + (PORT0<<
2)
  187 00000066 683D            ldr              r5, [r7]
  188 00000068         
  189 00000068         ;lecture de l'état du BUMPER GAUCHE
  190 00000068         
  191 00000068 F8DF 91A0       ldr              r9, =  GPIO_PORTE_BASE + (PORT1
<<2)
  192 0000006C F8D9 A000       ldr              r10, [r9]
  193 00000070         
  194 00000070         ;lecture de l'état du SW1 et ranger cet état dans r4
  195 00000070 F8DF B19C       ldr              r11,= GPIO_PORTD_BASE + (PORT6<
<2)
  196 00000074 F8DB 4000       ldr              r4, [r11]
  197 00000078         ;lecture de l'état du SW1 et ranger cet état dans r13
  198 00000078         ;ldr r11,= GPIO_PORTD_BASE + (PORT7<<2)
  199 00000078         ;ldr r13, [r11]
  200 00000078         ;Traitement qui allume/éteint la LED1 et la LED2 en fonc
                       tion de l'état  ;du SW1, la LED1 est initialement allumé
                       e, et s'éteint si SW1 ;est activé = appuyé
  201 00000078         ;si switch 1 est actif (=0), on éteint la LED1
  202 00000078 2C40            cmp              r4,#0x40
  203 0000007A D15E            bne              repartir
  204 0000007C         ;si switch 2 est actif (=0), on éteint la LED1
  205 0000007C         ;cmp r13,#0x80
  206 0000007C         ;bne sortir 
  207 0000007C         ;si BUMPER DROIT est actif (=0), on éteint la LED1
  208 0000007C         
  209 0000007C 2D01            cmp              r5,#0x01
  210 0000007E D106            bne              crenaux
  211 00000080         
  212 00000080         ;si BUMPER GAUCHE est actif (=0), on éteint la LED2
  213 00000080         
  214 00000080 F1BA 0F02       cmp              r10, #0x02
  215 00000084 D103            bne              crenaux
  216 00000086         
  217 00000086 6033            str              r3, [r6]    ; allume les leds 1
                                                             et 2
  218 00000088         
  219 00000088         
  220 00000088 4962            ldr              r1, =0xAFFFFF ; BL (Branchement
                                                             vers le lien WAIT)
                                                            ; possibilité de re
                                                            tour à la suite ave



ARM Macro Assembler    Page 6 


                                                            c (BX LR)
  221 0000008A 4962            ldr              r1, =0xAFFFFF
  222 0000008C         
  223 0000008C E7E7            b                loop
  224 0000008E         crenaux
  225 0000008E F04F 0C01       mov              r12, #1
  226 00000092 4E61            ldr              r6, = GPIO_PORTF_BASE + (PORT4<
<2)
  227 00000094 6032            str              r2, [r6]    ; éteint la led 1
  228 00000096 4E61            ldr              r6, = GPIO_PORTF_BASE + (PORT5<
<2)
  229 00000098 6032            str              r2, [r6]    ; éteint la led 2
  230 0000009A F7FF FFFE       BL               MOTEUR_DROIT_OFF
  231 0000009E F7FF FFFE       BL               MOTEUR_GAUCHE_OFF
  232 000000A2 495F            ldr              r1, =0x555555
  233 000000A4 F000 F899       BL               wait1
  234 000000A8 F7FF FFFE       BL               MOTEUR_DROIT_ON
  235 000000AC F7FF FFFE       BL               MOTEUR_GAUCHE_ON
  236 000000B0 F7FF FFFE       BL               MOTEUR_GAUCHE_ARRIERE
  237 000000B4 F7FF FFFE       BL               MOTEUR_DROIT_ARRIERE
  238 000000B8 495A            ldr              r1, =0x1312D00
  239 000000BA F000 F88E       BL               wait1
  240 000000BE F7FF FFFE       BL               MOTEUR_DROIT_OFF
  241 000000C2 F7FF FFFE       BL               MOTEUR_GAUCHE_OFF
  242 000000C6 4956            ldr              r1, =0x555555
  243 000000C8 F000 F887       BL               wait1
  244 000000CC 4956            ldr              r1, =0xBFFFFF
  245 000000CE F7FF FFFE       BL               MOTEUR_GAUCHE_ON
  246 000000D2 F7FF FFFE       BL               MOTEUR_DROIT_ON
  247 000000D6 F7FF FFFE       BL               MOTEUR_DROIT_AVANT
  248 000000DA F7FF FFFE       BL               MOTEUR_GAUCHE_ARRIERE
  249 000000DE F000 F87C       BL               wait1
  250 000000E2 F7FF FFFE       BL               MOTEUR_DROIT_OFF
  251 000000E6 F7FF FFFE       BL               MOTEUR_GAUCHE_OFF
  252 000000EA 494D            ldr              r1, =0x555555
  253 000000EC F000 F875       BL               wait1
  254 000000F0 494C            ldr              r1, =0x1312D00
  255 000000F2 F7FF FFFE       BL               MOTEUR_DROIT_ON
  256 000000F6 F7FF FFFE       BL               MOTEUR_GAUCHE_ON
  257 000000FA F7FF FFFE       BL               MOTEUR_GAUCHE_ARRIERE
  258 000000FE F7FF FFFE       BL               MOTEUR_DROIT_ARRIERE
  259 00000102 F000 F86A       BL               wait1
  260 00000106 F7FF FFFE       BL               MOTEUR_DROIT_OFF
  261 0000010A F7FF FFFE       BL               MOTEUR_GAUCHE_OFF
  262 0000010E 4944            ldr              r1, =0x555555
  263 00000110 F000 F863       BL               wait1
  264 00000114 4944            ldr              r1, =0xBFFFFF
  265 00000116 F7FF FFFE       BL               MOTEUR_GAUCHE_ON
  266 0000011A F7FF FFFE       BL               MOTEUR_DROIT_ON
  267 0000011E F7FF FFFE       BL               MOTEUR_DROIT_ARRIERE
  268 00000122 F7FF FFFE       BL               MOTEUR_GAUCHE_AVANT
  269 00000126 F000 F858       BL               wait1
  270 0000012A F7FF FFFE       BL               MOTEUR_DROIT_OFF
  271 0000012E F7FF FFFE       BL               MOTEUR_GAUCHE_OFF
  272 00000132 493B            ldr              r1, =0x555555
  273 00000134 F000 F851       BL               wait1
  274 00000138 E791            b                loop
  275 0000013A         
  276 0000013A         ;éteindre LED2



ARM Macro Assembler    Page 7 


  277 0000013A         repartir
  278 0000013A F1BC 0F01       cmp              r12, #1
  279 0000013E D141            BNE              droit
  280 00000140 4E35            ldr              r6, = GPIO_PORTF_BASE + (PORT4<
<2)
  281 00000142 6032            str              r2, [r6]    ; éteint la led 1
  282 00000144 4E35            ldr              r6, = GPIO_PORTF_BASE + (PORT5<
<2)
  283 00000146 6032            str              r2, [r6]    ; éteint la led 2
  284 00000148 F7FF FFFE       BL               MOTEUR_DROIT_OFF
  285 0000014C F7FF FFFE       BL               MOTEUR_GAUCHE_OFF
  286 00000150 4933            ldr              r1, =0x555555
  287 00000152 F000 F842       BL               wait1
  288 00000156 4934            ldr              r1, =0xBFFFFF
  289 00000158 F7FF FFFE       BL               MOTEUR_GAUCHE_ON
  290 0000015C F7FF FFFE       BL               MOTEUR_DROIT_ON
  291 00000160 F7FF FFFE       BL               MOTEUR_GAUCHE_ARRIERE
  292 00000164 F7FF FFFE       BL               MOTEUR_DROIT_AVANT
  293 00000168 F000 F837       BL               wait1
  294 0000016C F7FF FFFE       BL               MOTEUR_DROIT_OFF
  295 00000170 F7FF FFFE       BL               MOTEUR_GAUCHE_OFF
  296 00000174 492A            ldr              r1, =0x555555
  297 00000176 F000 F830       BL               wait1
  298 0000017A 492A            ldr              r1, =0x1312D00
  299 0000017C F7FF FFFE       BL               MOTEUR_DROIT_ON
  300 00000180 F7FF FFFE       BL               MOTEUR_GAUCHE_ON
  301 00000184 F7FF FFFE       BL               MOTEUR_GAUCHE_AVANT
  302 00000188 F7FF FFFE       BL               MOTEUR_DROIT_AVANT
  303 0000018C F000 F825       BL               wait1
  304 00000190 F7FF FFFE       BL               MOTEUR_DROIT_OFF
  305 00000194 F7FF FFFE       BL               MOTEUR_GAUCHE_OFF
  306 00000198 4921            ldr              r1, =0x555555
  307 0000019A F000 F81E       BL               wait1
  308 0000019E 4922            ldr              r1, =0xBFFFFF
  309 000001A0 F7FF FFFE       BL               MOTEUR_GAUCHE_ON
  310 000001A4 F7FF FFFE       BL               MOTEUR_DROIT_ON
  311 000001A8 F7FF FFFE       BL               MOTEUR_DROIT_ARRIERE
  312 000001AC F7FF FFFE       BL               MOTEUR_GAUCHE_AVANT
  313 000001B0 F000 F813       BL               wait1
  314 000001B4 F7FF FFFE       BL               MOTEUR_DROIT_OFF
  315 000001B8 F7FF FFFE       BL               MOTEUR_GAUCHE_OFF
  316 000001BC 4918            ldr              r1, =0x555555
  317 000001BE F000 F80C       BL               wait1
  318 000001C2 D1FF            BNE              droit
  319 000001C4         droit
  320 000001C4 F04F 0C00       mov              r12, #0
  321 000001C8 F7FF FFFE       BL               MOTEUR_DROIT_ON
  322 000001CC F7FF FFFE       BL               MOTEUR_GAUCHE_ON
  323 000001D0 F7FF FFFE       BL               MOTEUR_DROIT_AVANT
  324 000001D4 F7FF FFFE       BL               MOTEUR_GAUCHE_AVANT
  325 000001D8 E741            b                loop
  326 000001DA         
  327 000001DA 3901    wait1   subs             r1, #1
  328 000001DC D1FD            bne              wait1
  329 000001DE         ;; retour à la suite du lien de branchement
  330 000001DE 4770            BX               LR
  331 000001E0         
  332 000001E0 BF00            NOP
  333 000001E2 BF00            NOP



ARM Macro Assembler    Page 8 


  334 000001E4                 END
              400FE108 
              40025400 
              4002551C 
              40025500 
              4000751C 
              40007510 
              4002451C 
              40024510 
              400250C0 
              40024004 
              40024008 
              40007100 
              00AFFFFF 
              40025040 
              40025080 
              00555555 
              01312D00 
              00BFFFFF 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M3 --apcs=interw
ork --depend=.\objects\main.d -o.\objects\main.o -I.\RTE\_Target_1 -IC:\Keil_v5
\ARM\PACK\ARM\CMSIS\5.4.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.
4.0\Device\ARM\ARMCM3\Include --predefine="__EVAL SETA 1" --predefine="__MICROL
IB SETA 1" --predefine="__UVISION_VERSION SETA 526" --predefine="_RTE_ SETA 1" 
--predefine="ARMCM3 SETA 1" --list=.\listings\main.lst main.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 6 in file main.s
   Uses
      None
Comment: .text unused
__main 00000000

Symbol: __main
   Definitions
      At line 96 in file main.s
   Uses
      At line 8 in file main.s
      At line 94 in file main.s

crenaux 0000008E

Symbol: crenaux
   Definitions
      At line 224 in file main.s
   Uses
      At line 210 in file main.s
      At line 215 in file main.s

droit 000001C4

Symbol: droit
   Definitions
      At line 319 in file main.s
   Uses
      At line 279 in file main.s
      At line 318 in file main.s

loop 0000005E

Symbol: loop
   Definitions
      At line 176 in file main.s
   Uses
      At line 223 in file main.s
      At line 274 in file main.s
      At line 325 in file main.s

repartir 0000013A

Symbol: repartir
   Definitions
      At line 277 in file main.s
   Uses
      At line 203 in file main.s
Comment: repartir used once
wait1 000001DA

Symbol: wait1
   Definitions
      At line 327 in file main.s
   Uses



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

      At line 233 in file main.s
      At line 239 in file main.s
      At line 243 in file main.s
      At line 249 in file main.s
      At line 253 in file main.s
      At line 259 in file main.s
      At line 263 in file main.s
      At line 269 in file main.s
      At line 273 in file main.s
      At line 287 in file main.s
      At line 293 in file main.s
      At line 297 in file main.s
      At line 303 in file main.s
      At line 307 in file main.s
      At line 313 in file main.s
      At line 317 in file main.s
      At line 328 in file main.s

7 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

BOOL 00000000

Symbol: BOOL
   Definitions
      At line 92 in file main.s
   Uses
      None
Comment: BOOL unused
DUREE 002FFFFF

Symbol: DUREE
   Definitions
      At line 91 in file main.s
   Uses
      None
Comment: DUREE unused
GPIO_O_DEN 0000051C

Symbol: GPIO_O_DEN
   Definitions
      At line 49 in file main.s
   Uses
      At line 123 in file main.s
      At line 135 in file main.s
      At line 154 in file main.s

GPIO_O_DIR 00000400

Symbol: GPIO_O_DIR
   Definitions
      At line 37 in file main.s
   Uses
      At line 112 in file main.s
Comment: GPIO_O_DIR used once
GPIO_O_DR2R 00000500

Symbol: GPIO_O_DR2R
   Definitions
      At line 43 in file main.s
   Uses
      At line 129 in file main.s
Comment: GPIO_O_DR2R used once
GPIO_PORTD_BASE 40007000

Symbol: GPIO_PORTD_BASE
   Definitions
      At line 31 in file main.s
   Uses
      At line 135 in file main.s
      At line 143 in file main.s
      At line 195 in file main.s

GPIO_PORTE_BASE 40024000

Symbol: GPIO_PORTE_BASE
   Definitions
      At line 30 in file main.s
   Uses
      At line 154 in file main.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

      At line 160 in file main.s
      At line 186 in file main.s
      At line 191 in file main.s

GPIO_PORTF_BASE 40025000

Symbol: GPIO_PORTF_BASE
   Definitions
      At line 29 in file main.s
   Uses
      At line 112 in file main.s
      At line 123 in file main.s
      At line 129 in file main.s
      At line 182 in file main.s
      At line 226 in file main.s
      At line 228 in file main.s
      At line 280 in file main.s
      At line 282 in file main.s

GPIO_PUR 00000510

Symbol: GPIO_PUR
   Definitions
      At line 53 in file main.s
   Uses
      At line 143 in file main.s
      At line 160 in file main.s

LED1 00000010

Symbol: LED1
   Definitions
      At line 87 in file main.s
   Uses
      None
Comment: LED1 unused
NOL2D 00000000

Symbol: NOL2D
   Definitions
      At line 83 in file main.s
   Uses
      None
Comment: NOL2D unused
PORT0 00000001

Symbol: PORT0
   Definitions
      At line 73 in file main.s
   Uses
      At line 186 in file main.s
Comment: PORT0 used once
PORT01 00000003

Symbol: PORT01
   Definitions
      At line 69 in file main.s
   Uses
      At line 155 in file main.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Absolute symbols

      At line 161 in file main.s

PORT1 00000002

Symbol: PORT1
   Definitions
      At line 77 in file main.s
   Uses
      At line 191 in file main.s
Comment: PORT1 used once
PORT4 00000010

Symbol: PORT4
   Definitions
      At line 65 in file main.s
   Uses
      At line 226 in file main.s
      At line 280 in file main.s

PORT45 00000030

Symbol: PORT45
   Definitions
      At line 57 in file main.s
   Uses
      At line 116 in file main.s
      At line 124 in file main.s
      At line 130 in file main.s
      At line 181 in file main.s
      At line 182 in file main.s

PORT5 00000020

Symbol: PORT5
   Definitions
      At line 61 in file main.s
   Uses
      At line 228 in file main.s
      At line 282 in file main.s

PORT6 00000040

Symbol: PORT6
   Definitions
      At line 79 in file main.s
   Uses
      At line 136 in file main.s
      At line 144 in file main.s
      At line 195 in file main.s

PORT7 00000080

Symbol: PORT7
   Definitions
      At line 81 in file main.s
   Uses
      None
Comment: PORT7 unused
SYSCTL_PERIPH_GPIOF 400FE108



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Absolute symbols


Symbol: SYSCTL_PERIPH_GPIOF
   Definitions
      At line 24 in file main.s
   Uses
      At line 99 in file main.s
Comment: SYSCTL_PERIPH_GPIOF used once
20 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

MOTEUR_DROIT_ARRIERE 00000000

Symbol: MOTEUR_DROIT_ARRIERE
   Definitions
      At line 16 in file main.s
   Uses
      At line 237 in file main.s
      At line 258 in file main.s
      At line 267 in file main.s
      At line 311 in file main.s

MOTEUR_DROIT_AVANT 00000000

Symbol: MOTEUR_DROIT_AVANT
   Definitions
      At line 15 in file main.s
   Uses
      At line 247 in file main.s
      At line 292 in file main.s
      At line 302 in file main.s
      At line 323 in file main.s

MOTEUR_DROIT_INVERSE 00000000

Symbol: MOTEUR_DROIT_INVERSE
   Definitions
      At line 17 in file main.s
   Uses
      None
Comment: MOTEUR_DROIT_INVERSE unused
MOTEUR_DROIT_OFF 00000000

Symbol: MOTEUR_DROIT_OFF
   Definitions
      At line 14 in file main.s
   Uses
      At line 170 in file main.s
      At line 230 in file main.s
      At line 240 in file main.s
      At line 250 in file main.s
      At line 260 in file main.s
      At line 270 in file main.s
      At line 284 in file main.s
      At line 294 in file main.s
      At line 304 in file main.s
      At line 314 in file main.s

MOTEUR_DROIT_ON 00000000

Symbol: MOTEUR_DROIT_ON
   Definitions
      At line 13 in file main.s
   Uses
      At line 234 in file main.s
      At line 246 in file main.s
      At line 255 in file main.s
      At line 266 in file main.s
      At line 290 in file main.s
      At line 299 in file main.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

      At line 310 in file main.s
      At line 321 in file main.s

MOTEUR_GAUCHE_ARRIERE 00000000

Symbol: MOTEUR_GAUCHE_ARRIERE
   Definitions
      At line 22 in file main.s
   Uses
      At line 236 in file main.s
      At line 248 in file main.s
      At line 257 in file main.s
      At line 291 in file main.s

MOTEUR_GAUCHE_AVANT 00000000

Symbol: MOTEUR_GAUCHE_AVANT
   Definitions
      At line 21 in file main.s
   Uses
      At line 268 in file main.s
      At line 301 in file main.s
      At line 312 in file main.s
      At line 324 in file main.s

MOTEUR_GAUCHE_INVERSE 00000000

Symbol: MOTEUR_GAUCHE_INVERSE
   Definitions
      At line 23 in file main.s
   Uses
      None
Comment: MOTEUR_GAUCHE_INVERSE unused
MOTEUR_GAUCHE_OFF 00000000

Symbol: MOTEUR_GAUCHE_OFF
   Definitions
      At line 20 in file main.s
   Uses
      At line 171 in file main.s
      At line 231 in file main.s
      At line 241 in file main.s
      At line 251 in file main.s
      At line 261 in file main.s
      At line 271 in file main.s
      At line 285 in file main.s
      At line 295 in file main.s
      At line 305 in file main.s
      At line 315 in file main.s

MOTEUR_GAUCHE_ON 00000000

Symbol: MOTEUR_GAUCHE_ON
   Definitions
      At line 19 in file main.s
   Uses
      At line 235 in file main.s
      At line 245 in file main.s
      At line 256 in file main.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
External symbols

      At line 265 in file main.s
      At line 289 in file main.s
      At line 300 in file main.s
      At line 309 in file main.s
      At line 322 in file main.s

MOTEUR_INIT 00000000

Symbol: MOTEUR_INIT
   Definitions
      At line 11 in file main.s
   Uses
      At line 167 in file main.s
Comment: MOTEUR_INIT used once
11 symbols
375 symbols in table
