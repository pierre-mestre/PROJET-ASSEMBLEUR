


ARM Macro Assembler    Page 1 


    1 00000000         ; M. Akil, T. Grandpierre, R. Kachouri : département IT 
                       - ESIEE Paris -
    2 00000000         ; 01/2013 - Evalbot (Cortex M3 de Texas Instrument)
    3 00000000         ; programme - Pilotage 2 Moteurs Evalbot par PWM tout en
                        ASM (Evalbot tourne sur lui même)
    4 00000000         
    5 00000000         
    6 00000000         
    7 00000000                 AREA             |.text|, CODE, READONLY
    8 00000000                 ENTRY
    9 00000000                 EXPORT           __main
   10 00000000         
   11 00000000         ;; The IMPORT command specifies that a symbol is defined
                        in a shared object at runtime.
   12 00000000                 IMPORT           MOTEUR_INIT ; initialise les mo
                                                            teurs (configure le
                                                            s pwms + GPIO)
   13 00000000         
   14 00000000                 IMPORT           MOTEUR_DROIT_ON ; activer le mo
                                                            teur droit
   15 00000000                 IMPORT           MOTEUR_DROIT_OFF ; déactiver le
                                                             moteur droit
   16 00000000                 IMPORT           MOTEUR_DROIT_AVANT ; moteur dro
                                                            it tourne vers l'av
                                                            ant
   17 00000000                 IMPORT           MOTEUR_DROIT_ARRIERE ; moteur d
                                                            roit tourne vers l'
                                                            arrière
   18 00000000                 IMPORT           MOTEUR_DROIT_INVERSE ; inverse 
                                                            le sens de rotation
                                                             du moteur droit
   19 00000000         
   20 00000000                 IMPORT           MOTEUR_GAUCHE_ON ; activer le m
                                                            oteur gauche
   21 00000000                 IMPORT           MOTEUR_GAUCHE_OFF ; déactiver l
                                                            e moteur gauche
   22 00000000                 IMPORT           MOTEUR_GAUCHE_AVANT ; moteur ga
                                                            uche tourne vers l'
                                                            avant
   23 00000000                 IMPORT           MOTEUR_GAUCHE_ARRIERE ; moteur 
                                                            gauche tourne vers 
                                                            l'arrière
   24 00000000                 IMPORT           MOTEUR_GAUCHE_INVERSE ; inverse
                                                             le sens de rotatio
                                                            n du moteur gauche
   25 00000000 400FE108 
                       SYSCTL_PERIPH_GPIOF
                               EQU              0x400FE108
   26 00000000         
   27 00000000         ; The GPIODATA register is the data register
   28 00000000         ; GPIO Port F (APB) base: 0x4002.5000 (p416 datasheet de
                        ;lm3s9B92.pdf
   29 00000000         
   30 00000000 40025000 
                       GPIO_PORTF_BASE
                               EQU              0x40025000
   31 00000000 40024000 
                       GPIO_PORTE_BASE
                               EQU              0x40024000



ARM Macro Assembler    Page 2 


   32 00000000 40007000 
                       GPIO_PORTD_BASE
                               EQU              0x40007000
   33 00000000         
   34 00000000         ; configure the corresponding pin to be an output
   35 00000000         ; all GPIO pins are inputs by default
   36 00000000         ; GPIO Direction (p417 datasheet de lm3s9B92.pdf
   37 00000000         
   38 00000000 00000400 
                       GPIO_O_DIR
                               EQU              0x400
   39 00000000         
   40 00000000         ; The GPIODR2R register is the 2-mA drive control regist
                       er
   41 00000000         ; By default, all GPIO pins have 2-mA drive.
   42 00000000         ; GPIO 2-mA Drive Select (p428 datasheet de lm3s9B92.pdf
                       )
   43 00000000         
   44 00000000 00000500 
                       GPIO_O_DR2R
                               EQU              0x500
   45 00000000         
   46 00000000         ; Digital enable register
   47 00000000         ; To use the pin as a digital input or output, the ;corr
                       esponding GPIODEN bit must be set.
   48 00000000         ; GPIO Digital Enable (p437 datasheet de lm3s9B92.pdf)
   49 00000000         
   50 00000000 0000051C 
                       GPIO_O_DEN
                               EQU              0x51C
   51 00000000         
   52 00000000         ; Registre pour activer les switchs  en logiciel (par dé
                       faut ;ils sont reliés à la masse donc inactifs)
   53 00000000         
   54 00000000 00000510 
                       GPIO_PUR
                               EQU              0x510
   55 00000000         
   56 00000000         ; Port select - LED1 et LED2 sur la ligne 4 et 5 du port
                        F
   57 00000000         
   58 00000000 00000030 
                       PORT45  EQU              0x30
   59 00000000         
   60 00000000         ; Port select - LED 2 sur la ligne 5 du port F
   61 00000000         
   62 00000000 00000020 
                       PORT5   EQU              0x20
   63 00000000         
   64 00000000         ; Port select - LED 1 sur la ligne 4 du port F
   65 00000000         
   66 00000000 00000010 
                       PORT4   EQU              0x10
   67 00000000         
   68 00000000         ; PORT E : selection des BUMPER GAUCHE et DROIT,LIGNE 01
                        du Port E
   69 00000000         
   70 00000000 00000003 
                       PORT01  EQU              0x03



ARM Macro Assembler    Page 3 


   71 00000000         
   72 00000000         ; PORT E : selection du BUMPER DROIT, LIGNE 0 du Port E
   73 00000000         
   74 00000000 00000001 
                       PORT0   EQU              0x01
   75 00000000         
   76 00000000         ; PORT E : selection du BUMPER DROIT, LIGNE 1 du Port E
   77 00000000         
   78 00000000 00000002 
                       PORT1   EQU              0x02
   79 00000000         ; PORT D : selection du SW1,LIGNE 6 du Port D
   80 00000000 00000040 
                       PORT6   EQU              0x40
   81 00000000         ; Instruction : aucune LED allumée
   82 00000000 00000080 
                       PORT7   EQU              0x80
   83 00000000         ; Instruction : aucune LED allumée
   84 00000000 00000000 
                       NOL2D   EQU              0x00
   85 00000000         
   86 00000000         ; Instruction : LED 1 allumée, ligne 4, du port F
   87 00000000         
   88 00000000 00000010 
                       LED1    EQU              0x10
   89 00000000         
   90 00000000         ; blinking frequency, non utile dans ce programme
   91 00000000         
   92 00000000 002FFFFF 
                       DUREE   EQU              0x002FFFFF
   93 00000000 00000000 
                       BOOL    EQU              0x0
   94 00000000         
   95 00000000                 EXPORT           __main
   96 00000000         
   97 00000000         __main
   98 00000000 F04F 0C00       mov              r12, #0
   99 00000004 F04F 0038       mov              r0, #0x00000038
  100 00000008 4E5A            ldr              r6, = SYSCTL_PERIPH_GPIOF
  101 0000000A         
  102 0000000A 6030            str              r0, [r6]
  103 0000000C         
  104 0000000C         ;"There must be a delay of 3 system clocks before any GP
                       IO reg. access  (p413 datasheet de lm3s9B92.pdf)
  105 0000000C         ;tres tres important....;; pas necessaire en simu ou en 
                       debbug ;step by step...
  106 0000000C         
  107 0000000C BF00            nop
  108 0000000E BF00            nop
  109 00000010 BF00            nop
  110 00000012         
  111 00000012         ; CONFIGURATION LED
  112 00000012         
  113 00000012 4E59            ldr              r6, = GPIO_PORTF_BASE+GPIO_O_DI
R
  114 00000014         
  115 00000014         ; une broche (Pin) du portF en sortie (broche 4 et 5 : 0
                       0110000)
  116 00000014         
  117 00000014 F04F 0030       ldr              r0, = PORT45



ARM Macro Assembler    Page 4 


  118 00000018 6030            str              r0, [r6]
  119 0000001A         ;ldr r0, = PORT5
  120 0000001A         ;str r0, [r8]  ; r8 contient sortie du PORT5
  121 0000001A         
  122 0000001A         ; Enable Digital Function  
  123 0000001A         
  124 0000001A 4E58            ldr              r6, = GPIO_PORTF_BASE+GPIO_O_DE
N
  125 0000001C F04F 0030       ldr              r0, = PORT45
  126 00000020 6030            str              r0, [r6]
  127 00000022         
  128 00000022         ; Choix de l'intensité de sortie (2mA) 
  129 00000022         
  130 00000022 4E57            ldr              r6, = GPIO_PORTF_BASE+GPIO_O_DR
2R
  131 00000024 F04F 0030       ldr              r0, = PORT45
  132 00000028 6030            str              r0, [r6]
  133 0000002A         
  134 0000002A         ; pour eteindre LED
  135 0000002A         ; Configuration du Port D - Enable Digital Function - Po
                       rt D   
  136 0000002A F8DF B158       ldr              r11, = GPIO_PORTD_BASE+GPIO_O_D
EN
  137 0000002E F04F 0040       ldr              r0, = PORT6
  138 00000032 F8CB 0000       str              r0, [r11]
  139 00000036         ; Configuration du Port D - Enable Digital Function - Po
                       rt D   
  140 00000036         ;ldr r11, = GPIO_PORTD_BASE+GPIO_O_DEN 
  141 00000036         ; ldr r0, = PORT7  
  142 00000036         ; str r0, [r11] 
  143 00000036         ; Activer le registre des switchs, Port D   
  144 00000036 F8DF B150       ldr              r11, = GPIO_PORTD_BASE+GPIO_PUR
  145 0000003A F04F 0040       ldr              r0, = PORT6
  146 0000003E F8CB 0000       str              r0, [r11]
  147 00000042         ;mov r2, #0x000           
  148 00000042         ; Activer le registre des switchs, Port D   
  149 00000042         ;ldr r11, = GPIO_PORTD_BASE+GPIO_PUR 
  150 00000042         ; ldr r0, = PORT7
  151 00000042         ; str r0, [r11]
  152 00000042         ;mov r2, #0x000  
  153 00000042         ; Enable Digital Function - Port E
  154 00000042         
  155 00000042 4F52            ldr              r7, = GPIO_PORTE_BASE+GPIO_O_DE
N
  156 00000044 F04F 0003       ldr              r0, = PORT01
  157 00000048 6038            str              r0, [r7]
  158 0000004A         
  159 0000004A         ; Activer le registre des bumpers, Port E
  160 0000004A         
  161 0000004A 4F51            ldr              r7, = GPIO_PORTE_BASE+GPIO_PUR
  162 0000004C F04F 0003       ldr              r0, = PORT01
  163 00000050 6038            str              r0, [r7]
  164 00000052         
  165 00000052         ;; BL Branchement vers un lien (sous programme)
  166 00000052         
  167 00000052         ; Configure les PWM + GPIO
  168 00000052 F7FF FFFE       BL               MOTEUR_INIT
  169 00000056         
  170 00000056         ; Activer les deux moteurs droit et gauche



ARM Macro Assembler    Page 5 


  171 00000056 F7FF FFFE       BL               MOTEUR_DROIT_OFF
  172 0000005A F7FF FFFE       BL               MOTEUR_GAUCHE_OFF
  173 0000005E         
  174 0000005E         
  175 0000005E         
  176 0000005E         ; Boucle de pilotage des 2 Moteurs (Evalbot tourne sur l
                       ui même)
  177 0000005E         loop
  178 0000005E         
  179 0000005E         
  180 0000005E         ; Evalbot avance droit devant
  181 0000005E         ; Avancement pendant une période (deux WAIT)
  182 0000005E F04F 0330       mov              r3, #PORT45
  183 00000062 4E4C            ldr              r6, = GPIO_PORTF_BASE + (PORT45
<<2)
  184 00000064         
  185 00000064         ;lecture de l'état du BUMPER DROIT
  186 00000064         
  187 00000064 4F4C            ldr              r7,= GPIO_PORTE_BASE + (PORT0<<
2)
  188 00000066 683D            ldr              r5, [r7]
  189 00000068         
  190 00000068         ;lecture de l'état du BUMPER GAUCHE
  191 00000068         
  192 00000068 F8DF 9130       ldr              r9, =  GPIO_PORTE_BASE + (PORT1
<<2)
  193 0000006C F8D9 A000       ldr              r10, [r9]
  194 00000070         
  195 00000070         ;lecture de l'état du SW1 et ranger cet état dans r4
  196 00000070 F8DF B12C       ldr              r11,= GPIO_PORTD_BASE + (PORT6<
<2)
  197 00000074 F8DB 4000       ldr              r4, [r11]
  198 00000078         ;lecture de l'état du SW1 et ranger cet état dans r13
  199 00000078         ;ldr r11,= GPIO_PORTD_BASE + (PORT7<<2)
  200 00000078         ;ldr r13, [r11]
  201 00000078         ;Traitement qui allume/éteint la LED1 et la LED2 en fonc
                       tion de l'état  ;du SW1, la LED1 est initialement allumé
                       e, et s'éteint si SW1 ;est activé = appuyé
  202 00000078         ;si switch 1 est actif (=0), on éteint la LED1
  203 00000078 2C40            cmp              r4,#0x40
  204 0000007A D15E            bne              avancer
  205 0000007C         ;si switch 2 est actif (=0), on éteint la LED1
  206 0000007C         ;cmp r13,#0x80
  207 0000007C         ;bne sortir 
  208 0000007C         ;si BUMPER DROIT est actif (=0), on éteint la LED1
  209 0000007C         
  210 0000007C 2D01            cmp              r5,#0x01
  211 0000007E D106            bne              crenaux
  212 00000080         
  213 00000080         ;si BUMPER GAUCHE est actif (=0), on éteint la LED2
  214 00000080         
  215 00000080 F1BA 0F02       cmp              r10, #0x02
  216 00000084 D103            bne              crenaux
  217 00000086         
  218 00000086 6033            str              r3, [r6]    ; allume les leds 1
                                                             et 2
  219 00000088         
  220 00000088         
  221 00000088 4946            ldr              r1, =0xAFFFFF ; BL (Branchement



ARM Macro Assembler    Page 6 


                                                             vers le lien WAIT)
                                                            ; possibilité de re
                                                            tour à la suite ave
                                                            c (BX LR)
  222 0000008A 4946            ldr              r1, =0xAFFFFF
  223 0000008C         
  224 0000008C E7E7            b                loop
  225 0000008E         crenaux
  226 0000008E 4E46            ldr              r6, = GPIO_PORTF_BASE + (PORT4<
<2)
  227 00000090 6032            str              r2, [r6]    ; éteint la led 1
  228 00000092 4E46            ldr              r6, = GPIO_PORTF_BASE + (PORT5<
<2)
  229 00000094 6032            str              r2, [r6]    ; éteint la led 2
  230 00000096 F7FF FFFE       BL               MOTEUR_DROIT_OFF
  231 0000009A F7FF FFFE       BL               MOTEUR_GAUCHE_OFF
  232 0000009E 4944            ldr              r1, =0x555555
  233 000000A0 F000 F862       BL               wait1
  234 000000A4 F7FF FFFE       BL               MOTEUR_DROIT_ON
  235 000000A8 F7FF FFFE       BL               MOTEUR_GAUCHE_ON
  236 000000AC F7FF FFFE       BL               MOTEUR_GAUCHE_ARRIERE
  237 000000B0 F7FF FFFE       BL               MOTEUR_DROIT_ARRIERE
  238 000000B4 493F            ldr              r1, =0x1312D00
  239 000000B6 F000 F857       BL               wait1
  240 000000BA F7FF FFFE       BL               MOTEUR_DROIT_OFF
  241 000000BE F7FF FFFE       BL               MOTEUR_GAUCHE_OFF
  242 000000C2 493B            ldr              r1, =0x555555
  243 000000C4 F000 F850       BL               wait1
  244 000000C8 493B            ldr              r1, =0xBFFFFF
  245 000000CA F7FF FFFE       BL               MOTEUR_GAUCHE_ON
  246 000000CE F7FF FFFE       BL               MOTEUR_DROIT_ON
  247 000000D2 F7FF FFFE       BL               MOTEUR_DROIT_AVANT
  248 000000D6 F7FF FFFE       BL               MOTEUR_GAUCHE_ARRIERE
  249 000000DA F000 F845       BL               wait1
  250 000000DE F7FF FFFE       BL               MOTEUR_DROIT_OFF
  251 000000E2 F7FF FFFE       BL               MOTEUR_GAUCHE_OFF
  252 000000E6 4932            ldr              r1, =0x555555
  253 000000E8 F000 F83E       BL               wait1
  254 000000EC 4931            ldr              r1, =0x1312D00
  255 000000EE F7FF FFFE       BL               MOTEUR_DROIT_ON
  256 000000F2 F7FF FFFE       BL               MOTEUR_GAUCHE_ON
  257 000000F6 F7FF FFFE       BL               MOTEUR_GAUCHE_ARRIERE
  258 000000FA F7FF FFFE       BL               MOTEUR_DROIT_ARRIERE
  259 000000FE F000 F833       BL               wait1
  260 00000102 F7FF FFFE       BL               MOTEUR_DROIT_OFF
  261 00000106 F7FF FFFE       BL               MOTEUR_GAUCHE_OFF
  262 0000010A 4929            ldr              r1, =0x555555
  263 0000010C F000 F82C       BL               wait1
  264 00000110 4929            ldr              r1, =0xBFFFFF
  265 00000112 F7FF FFFE       BL               MOTEUR_GAUCHE_ON
  266 00000116 F7FF FFFE       BL               MOTEUR_DROIT_ON
  267 0000011A F7FF FFFE       BL               MOTEUR_DROIT_ARRIERE
  268 0000011E F7FF FFFE       BL               MOTEUR_GAUCHE_AVANT
  269 00000122 F000 F821       BL               wait1
  270 00000126 F7FF FFFE       BL               MOTEUR_DROIT_OFF
  271 0000012A F7FF FFFE       BL               MOTEUR_GAUCHE_OFF
  272 0000012E 4920            ldr              r1, =0x555555
  273 00000130 F000 F81A       BL               wait1
  274 00000134 F04F 0C01       mov              r12, #1



ARM Macro Assembler    Page 7 


  275 00000138 E791            b                loop
  276 0000013A         
  277 0000013A         ;éteindre LED2
  278 0000013A         avancer
  279 0000013A F7FF FFFE       BL               MOTEUR_DROIT_ON
  280 0000013E F7FF FFFE       BL               MOTEUR_GAUCHE_ON
  281 00000142 F7FF FFFE       BL               MOTEUR_DROIT_AVANT
  282 00000146 F7FF FFFE       BL               MOTEUR_GAUCHE_AVANT
  283 0000014A E788            b                loop
  284 0000014C         sortir
  285 0000014C F1BC 0F01       cmp              r12, #1
  286 00000150 D185            BNE              loop
  287 00000152 F7FF FFFE       BL               MOTEUR_DROIT_ON
  288 00000156 F7FF FFFE       BL               MOTEUR_GAUCHE_ON
  289 0000015A F7FF FFFE       BL               MOTEUR_DROIT_AVANT
  290 0000015E F7FF FFFE       BL               MOTEUR_GAUCHE_AVANT
  291 00000162 F04F 0C00       mov              r12, #0
  292 00000166 E77A            b                loop
  293 00000168         
  294 00000168 3901    wait1   subs             r1, #1
  295 0000016A D1FD            bne              wait1
  296 0000016C         ;; retour à la suite du lien de branchement
  297 0000016C 4770            BX               LR
  298 0000016E         
  299 0000016E BF00            NOP
  300 00000170 BF00            NOP
  301 00000172                 END
              00 00 400FE108 
              40025400 
              4002551C 
              40025500 
              4000751C 
              40007510 
              4002451C 
              40024510 
              400250C0 
              40024004 
              40024008 
              40007100 
              00AFFFFF 
              40025040 
              40025080 
              00555555 
              01312D00 
              00BFFFFF 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M3 --apcs=interw
ork --depend=.\objects\main.d -o.\objects\main.o -I.\RTE\_Target_1 -IC:\Keil_v5
\ARM\PACK\ARM\CMSIS\5.4.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.
4.0\Device\ARM\ARMCM3\Include --predefine="__EVAL SETA 1" --predefine="__MICROL
IB SETA 1" --predefine="__UVISION_VERSION SETA 526" --predefine="_RTE_ SETA 1" 
--predefine="ARMCM3 SETA 1" --list=.\listings\main.lst main.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 7 in file main.s
   Uses
      None
Comment: .text unused
__main 00000000

Symbol: __main
   Definitions
      At line 97 in file main.s
   Uses
      At line 9 in file main.s
      At line 95 in file main.s

avancer 0000013A

Symbol: avancer
   Definitions
      At line 278 in file main.s
   Uses
      At line 204 in file main.s
Comment: avancer used once
crenaux 0000008E

Symbol: crenaux
   Definitions
      At line 225 in file main.s
   Uses
      At line 211 in file main.s
      At line 216 in file main.s

loop 0000005E

Symbol: loop
   Definitions
      At line 177 in file main.s
   Uses
      At line 224 in file main.s
      At line 275 in file main.s
      At line 283 in file main.s
      At line 286 in file main.s
      At line 292 in file main.s

sortir 0000014C

Symbol: sortir
   Definitions
      At line 284 in file main.s
   Uses
      None
Comment: sortir unused
wait1 00000168

Symbol: wait1
   Definitions
      At line 294 in file main.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Uses
      At line 233 in file main.s
      At line 239 in file main.s
      At line 243 in file main.s
      At line 249 in file main.s
      At line 253 in file main.s
      At line 259 in file main.s
      At line 263 in file main.s
      At line 269 in file main.s
      At line 273 in file main.s
      At line 295 in file main.s

7 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

BOOL 00000000

Symbol: BOOL
   Definitions
      At line 93 in file main.s
   Uses
      None
Comment: BOOL unused
DUREE 002FFFFF

Symbol: DUREE
   Definitions
      At line 92 in file main.s
   Uses
      None
Comment: DUREE unused
GPIO_O_DEN 0000051C

Symbol: GPIO_O_DEN
   Definitions
      At line 50 in file main.s
   Uses
      At line 124 in file main.s
      At line 136 in file main.s
      At line 155 in file main.s

GPIO_O_DIR 00000400

Symbol: GPIO_O_DIR
   Definitions
      At line 38 in file main.s
   Uses
      At line 113 in file main.s
Comment: GPIO_O_DIR used once
GPIO_O_DR2R 00000500

Symbol: GPIO_O_DR2R
   Definitions
      At line 44 in file main.s
   Uses
      At line 130 in file main.s
Comment: GPIO_O_DR2R used once
GPIO_PORTD_BASE 40007000

Symbol: GPIO_PORTD_BASE
   Definitions
      At line 32 in file main.s
   Uses
      At line 136 in file main.s
      At line 144 in file main.s
      At line 196 in file main.s

GPIO_PORTE_BASE 40024000

Symbol: GPIO_PORTE_BASE
   Definitions
      At line 31 in file main.s
   Uses
      At line 155 in file main.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

      At line 161 in file main.s
      At line 187 in file main.s
      At line 192 in file main.s

GPIO_PORTF_BASE 40025000

Symbol: GPIO_PORTF_BASE
   Definitions
      At line 30 in file main.s
   Uses
      At line 113 in file main.s
      At line 124 in file main.s
      At line 130 in file main.s
      At line 183 in file main.s
      At line 226 in file main.s
      At line 228 in file main.s

GPIO_PUR 00000510

Symbol: GPIO_PUR
   Definitions
      At line 54 in file main.s
   Uses
      At line 144 in file main.s
      At line 161 in file main.s

LED1 00000010

Symbol: LED1
   Definitions
      At line 88 in file main.s
   Uses
      None
Comment: LED1 unused
NOL2D 00000000

Symbol: NOL2D
   Definitions
      At line 84 in file main.s
   Uses
      None
Comment: NOL2D unused
PORT0 00000001

Symbol: PORT0
   Definitions
      At line 74 in file main.s
   Uses
      At line 187 in file main.s
Comment: PORT0 used once
PORT01 00000003

Symbol: PORT01
   Definitions
      At line 70 in file main.s
   Uses
      At line 156 in file main.s
      At line 162 in file main.s




ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Absolute symbols

PORT1 00000002

Symbol: PORT1
   Definitions
      At line 78 in file main.s
   Uses
      At line 192 in file main.s
Comment: PORT1 used once
PORT4 00000010

Symbol: PORT4
   Definitions
      At line 66 in file main.s
   Uses
      At line 226 in file main.s
Comment: PORT4 used once
PORT45 00000030

Symbol: PORT45
   Definitions
      At line 58 in file main.s
   Uses
      At line 117 in file main.s
      At line 125 in file main.s
      At line 131 in file main.s
      At line 182 in file main.s
      At line 183 in file main.s

PORT5 00000020

Symbol: PORT5
   Definitions
      At line 62 in file main.s
   Uses
      At line 228 in file main.s
Comment: PORT5 used once
PORT6 00000040

Symbol: PORT6
   Definitions
      At line 80 in file main.s
   Uses
      At line 137 in file main.s
      At line 145 in file main.s
      At line 196 in file main.s

PORT7 00000080

Symbol: PORT7
   Definitions
      At line 82 in file main.s
   Uses
      None
Comment: PORT7 unused
SYSCTL_PERIPH_GPIOF 400FE108

Symbol: SYSCTL_PERIPH_GPIOF
   Definitions
      At line 25 in file main.s



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Absolute symbols

   Uses
      At line 100 in file main.s
Comment: SYSCTL_PERIPH_GPIOF used once
20 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

MOTEUR_DROIT_ARRIERE 00000000

Symbol: MOTEUR_DROIT_ARRIERE
   Definitions
      At line 17 in file main.s
   Uses
      At line 237 in file main.s
      At line 258 in file main.s
      At line 267 in file main.s

MOTEUR_DROIT_AVANT 00000000

Symbol: MOTEUR_DROIT_AVANT
   Definitions
      At line 16 in file main.s
   Uses
      At line 247 in file main.s
      At line 281 in file main.s
      At line 289 in file main.s

MOTEUR_DROIT_INVERSE 00000000

Symbol: MOTEUR_DROIT_INVERSE
   Definitions
      At line 18 in file main.s
   Uses
      None
Comment: MOTEUR_DROIT_INVERSE unused
MOTEUR_DROIT_OFF 00000000

Symbol: MOTEUR_DROIT_OFF
   Definitions
      At line 15 in file main.s
   Uses
      At line 171 in file main.s
      At line 230 in file main.s
      At line 240 in file main.s
      At line 250 in file main.s
      At line 260 in file main.s
      At line 270 in file main.s

MOTEUR_DROIT_ON 00000000

Symbol: MOTEUR_DROIT_ON
   Definitions
      At line 14 in file main.s
   Uses
      At line 234 in file main.s
      At line 246 in file main.s
      At line 255 in file main.s
      At line 266 in file main.s
      At line 279 in file main.s
      At line 287 in file main.s

MOTEUR_GAUCHE_ARRIERE 00000000

Symbol: MOTEUR_GAUCHE_ARRIERE
   Definitions
      At line 23 in file main.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

   Uses
      At line 236 in file main.s
      At line 248 in file main.s
      At line 257 in file main.s

MOTEUR_GAUCHE_AVANT 00000000

Symbol: MOTEUR_GAUCHE_AVANT
   Definitions
      At line 22 in file main.s
   Uses
      At line 268 in file main.s
      At line 282 in file main.s
      At line 290 in file main.s

MOTEUR_GAUCHE_INVERSE 00000000

Symbol: MOTEUR_GAUCHE_INVERSE
   Definitions
      At line 24 in file main.s
   Uses
      None
Comment: MOTEUR_GAUCHE_INVERSE unused
MOTEUR_GAUCHE_OFF 00000000

Symbol: MOTEUR_GAUCHE_OFF
   Definitions
      At line 21 in file main.s
   Uses
      At line 172 in file main.s
      At line 231 in file main.s
      At line 241 in file main.s
      At line 251 in file main.s
      At line 261 in file main.s
      At line 271 in file main.s

MOTEUR_GAUCHE_ON 00000000

Symbol: MOTEUR_GAUCHE_ON
   Definitions
      At line 20 in file main.s
   Uses
      At line 235 in file main.s
      At line 245 in file main.s
      At line 256 in file main.s
      At line 265 in file main.s
      At line 280 in file main.s
      At line 288 in file main.s

MOTEUR_INIT 00000000

Symbol: MOTEUR_INIT
   Definitions
      At line 12 in file main.s
   Uses
      At line 168 in file main.s
Comment: MOTEUR_INIT used once
11 symbols
375 symbols in table
